<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.care.boot.ticket.TicketMapper">

    <!-- 티켓 예매 -->
<insert id="insertTicket" parameterType="com.care.boot.ticket.TicketHolderDTO">
    INSERT INTO TicketHolder (
        concert_id, concert_name, id, userName, mobile, email, membership, reserved_at, ticket_number
    ) VALUES (
        #{concertId}, #{concertName}, #{id}, #{userName}, #{mobile}, #{email}, #{membership}, #{reservedAt}, #{ticketNumber}
    )
</insert>


    <!-- 예매 로그 저장 -->
    <insert id="insertReservation" parameterType="com.care.boot.ticket.ReservationDTO">
        INSERT INTO Reservation (
            reservation_id, concert_id, id, reserved_at, event_type
        ) VALUES (
            #{reservationId}, #{concertId}, #{id}, #{reservedAt}, #{eventType}
        )
    </insert>

    <!-- 콘서트별 예매 수 조회 -->
    <select id="countTicketsByConcertId" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM TicketHolder WHERE concert_id = #{concertId}
    </select>

    <!-- 콘서트별 마지막 티켓 번호 조회 -->
    <select id="getLastTicketNumber" parameterType="int" resultType="int">
        SELECT MAX(ticket_number) FROM TicketHolder WHERE concert_id = #{concertId}
    </select>

    <!-- 유저 예매 내역 조회 -->
    <select id="getTicketsByUserId" parameterType="string" resultType="com.care.boot.ticket.TicketHolderDTO">
        SELECT * FROM TicketHolder WHERE id = #{id}
    </select>

    <!-- 콘서트 전체 목록 조회 -->
    <select id="selectAllConcerts" resultType="com.care.boot.ticket.ConcertDTO">
        SELECT 
            concert_id AS concertId,
            name,
            genre,
            location,
            date
        FROM Concert
    </select>
    
    <select id="selectConcertById" resultType="com.care.boot.ticket.ConcertDTO">
    SELECT * FROM concert WHERE concert_id = #{concertId}
	</select>
    

    <!-- RegularMember에서 유저 정보 조회 -->
    <select id="findRegularMemberById" parameterType="string" resultType="com.care.boot.member.MemberDTO">
        SELECT id, pw AS password, userName, mobile, membership, email
        FROM RegularMember
        WHERE id = #{id}
    </select>

    <!-- VIPMember에서 유저 정보 조회 (vipNumber 필드 포함) -->
    <select id="findVipMemberById" parameterType="string" resultType="com.care.boot.member.MemberDTO">
        SELECT id, pw AS password, userName, mobile, membership, email, vip_number AS vipNumber
        FROM VIPMember
        WHERE id = #{id}
    </select>

	<select id="selectAllReservations" resultType="com.care.boot.ticket.ReservationDTO">
	    SELECT * FROM Reservation
	</select>


</mapper>
